
services:
  # ==================== BROKERS MQTT ====================
  broker1:
    image: eclipse-mosquitto:latest
    container_name: broker1
    ports:
      - "1886:1883" # Usando a porta 1886 que jรก corrigimos
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - broker1_data:/mosquitto/data
      - broker1_log:/mosquitto/log
    networks: # <-- ADICIONE ESTAS DUAS LINHAS
      - game_network

  broker2:
    image: eclipse-mosquitto:latest
    container_name: broker2
    ports:
      - "1884:1883"
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - broker2_data:/mosquitto/data
      - broker2_log:/mosquitto/log
    networks: # <-- ADICIONE ESTAS DUAS LINHAS
      - game_network

  broker3:
    image: eclipse-mosquitto:latest
    container_name: broker3
    ports:
      - "1885:1883"
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - broker3_data:/mosquitto/data
      - broker3_log:/mosquitto/log
    networks: # <-- ADICIONE ESTAS DUAS LINHAS
      - game_network
  # ==================== SERVIDORES DE JOGO ====================
  
  # Servidor 1
  servidor1:
    build:
      context: .
      dockerfile: servidor/Dockerfile
    container_name: servidor1
    command: ["-addr", "servidor1:8080", "-broker", "tcp://broker1:1883"]
    ports:
      - "8080:8080"
    depends_on:
      broker1:
        condition: service_started
    networks:
      - game_network
    restart: unless-stopped
    environment:
      - GO_ENV=production
      - PEERS=servidor1:8080,servidor2:8080,servidor3:8080
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8080"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Servidor 2
  servidor2:
    build:
      context: .
      dockerfile: servidor/Dockerfile
    container_name: servidor2
    command: ["-addr", "servidor2:8080", "-broker", "tcp://broker2:1883"]
    ports:
      - "8081:8080"
    depends_on:
      broker2:
        condition: service_started
    networks:
      - game_network
    restart: unless-stopped
    environment:
      - GO_ENV=production
      - PEERS=servidor1:8080,servidor2:8080,servidor3:8080
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8080"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Servidor 3
  servidor3:
    build:
      context: .
      dockerfile: servidor/Dockerfile
    container_name: servidor3
    command: ["-addr", "servidor3:8080", "-broker", "tcp://broker3:1883"]
    ports:
      - "8082:8080"
    depends_on:
      broker3:
        condition: service_started
    networks:
      - game_network
    restart: unless-stopped
    environment:
      - GO_ENV=production
      - PEERS=servidor1:8080,servidor2:8080,servidor3:8080
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8080"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 40s

  # ==================== CLIENTES (OPCIONAL PARA TESTES) ====================
  
  # Cliente de exemplo - pode ser executado manualmente
  # Para executar: docker-compose run --rm cliente
  cliente:
    build:
      context: .
      dockerfile: cliente/Dockerfile
    container_name: cliente_interativo
    stdin_open: true
    tty: true
    depends_on:
      - servidor1
      - servidor2
      - servidor3
    networks:
      - game_network
    profiles:
      - cliente  # Use: docker-compose --profile cliente up

# ==================== VOLUMES ====================
volumes:
  broker1_data:
  broker1_log:
  broker2_data:
  broker2_log:
  broker3_data:
  broker3_log:

# ==================== NETWORK ====================
networks:
  game_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

